{"version":3,"file":"index.umd.min.js","sources":["../src/contracts/TokenfactoryContract.ts"],"sourcesContent":["/**\n* This file was automatically generated by cosmwasm-typescript-gen@0.3.9.\n* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,\n* and run the cosmwasm-typescript-gen generate command to regenerate this file.\n*/\n\nimport { CosmWasmClient, ExecuteResult, SigningCosmWasmClient } from \"@cosmjs/cosmwasm-stargate\";\nimport { Coin, StdFee } from \"@cosmjs/amino\";\nexport type ExecuteMsg = {\n  create_denom: {\n    subdenom: string;\n    [k: string]: unknown;\n  };\n};\nexport interface InstantiateMsg {\n  [k: string]: unknown;\n}\nexport type QueryMsg = string;\nexport interface TokenfactoryReadOnlyInterface {\n  contractAddress: string;\n}\nexport class TokenfactoryQueryClient implements TokenfactoryReadOnlyInterface {\n  client: CosmWasmClient;\n  contractAddress: string;\n\n  constructor(client: CosmWasmClient, contractAddress: string) {\n    this.client = client;\n    this.contractAddress = contractAddress;\n  }\n\n}\nexport interface TokenfactoryInterface extends TokenfactoryReadOnlyInterface {\n  contractAddress: string;\n  sender: string;\n  createDenom: ({\n    subdenom\n  }: {\n    subdenom: string;\n  }, fee?: number | StdFee | \"auto\", memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;\n}\nexport class TokenfactoryClient extends TokenfactoryQueryClient implements TokenfactoryInterface {\n  client: SigningCosmWasmClient;\n  sender: string;\n  contractAddress: string;\n\n  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {\n    super(client, contractAddress);\n    this.client = client;\n    this.sender = sender;\n    this.contractAddress = contractAddress;\n    this.createDenom = this.createDenom.bind(this);\n  }\n\n  createDenom = async ({\n    subdenom\n  }: {\n    subdenom: string;\n  }, fee: number | StdFee | \"auto\" = \"auto\", memo?: string, funds?: readonly Coin[]): Promise<ExecuteResult> => {\n    return await this.client.execute(this.sender, this.contractAddress, {\n      create_denom: {\n        subdenom\n      }\n    }, fee, memo, funds);\n  };\n}"],"names":["TokenfactoryQueryClient","client","contractAddress","this","TokenfactoryClient","_super","sender","_this","call","createDenom","_a","fee","memo","funds","subdenom","execute","create_denom","_b","bind","__extends"],"mappings":";;;;;gxDAqBA,IAAAA,EAIE,SAAYC,EAAwBC,GAClCC,KAAKF,OAASA,EACdE,KAAKD,gBAAkBA,CACxB,EAYHE,EAAA,SAAAC,GAKE,SAAAD,EAAYH,EAA+BK,EAAgBJ,GAA3D,IAAAK,EACEF,EAAMG,KAAAL,KAAAF,EAAQC,IAKfC,YAEDI,EAAWE,YAAG,SAAOC,EAIlBC,EAAwCC,EAAeC,GAHxD,IAAAC,EAAQJ,EAAAI,qBAGP,IAAAH,IAAAA,EAAsC,iFAChC,KAAA,EAAA,MAAA,CAAA,EAAMR,KAAKF,OAAOc,QAAQZ,KAAKG,OAAQH,KAAKD,gBAAiB,CAClEc,aAAc,CACZF,SAAQA,IAETH,EAAKC,EAAMC,IAJd,KAAA,EAAA,MAAA,CAAA,EAAOI,kBAXPV,EAAKN,OAASA,EACdM,EAAKD,OAASA,EACdC,EAAKL,gBAAkBA,EACvBK,EAAKE,YAAcF,EAAKE,YAAYS,KAAKX,IAC1C,CAaH,0PAxBwCY,CAAuBf,EAAAC,GAwB9DD,CAAD,CAxBA,CAAwCJ"}