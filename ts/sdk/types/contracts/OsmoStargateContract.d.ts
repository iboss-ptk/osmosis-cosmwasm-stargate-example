/**
* This file was automatically generated by cosmwasm-typescript-gen@0.3.9.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the cosmwasm-typescript-gen generate command to regenerate this file.
*/
import { CosmWasmClient, ExecuteResult, SigningCosmWasmClient } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
export declare type ExecuteMsg = {
    create_denom: {
        subdenom: string;
        [k: string]: unknown;
    };
} | {
    reset: {
        count: number;
        [k: string]: unknown;
    };
};
export interface GetCountResponse {
    count: number;
    [k: string]: unknown;
}
export interface InstantiateMsg {
    count: number;
    [k: string]: unknown;
}
export declare type QueryMsg = {
    get_count: {
        [k: string]: unknown;
    };
};
export declare type Addr = string;
export interface State {
    count: number;
    owner: Addr;
    [k: string]: unknown;
}
export interface OsmoStargateReadOnlyInterface {
    contractAddress: string;
    getCount: () => Promise<GetCountResponse>;
}
export declare class OsmoStargateQueryClient implements OsmoStargateReadOnlyInterface {
    client: CosmWasmClient;
    contractAddress: string;
    constructor(client: CosmWasmClient, contractAddress: string);
    getCount: () => Promise<GetCountResponse>;
}
export interface OsmoStargateInterface extends OsmoStargateReadOnlyInterface {
    contractAddress: string;
    sender: string;
    createDenom: ({ subdenom }: {
        subdenom: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;
    reset: ({ count }: {
        count: number;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;
}
export declare class OsmoStargateClient extends OsmoStargateQueryClient implements OsmoStargateInterface {
    client: SigningCosmWasmClient;
    sender: string;
    contractAddress: string;
    constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string);
    createDenom: ({ subdenom }: {
        subdenom: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;
    reset: ({ count }: {
        count: number;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;
}
//# sourceMappingURL=OsmoStargateContract.d.ts.map